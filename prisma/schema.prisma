generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  userID                String             @id @default(uuid())
  username              String             @db.String(255)
  email                 String             @unique @db.String(255)
  image                 String?            @db.String(255)
  role                  String             @default("examiner")
  createdClassrooms     Classroom[]        @relation("createdClassrooms")
  discussions           DiscussionThread[]
  Exam                  Exam[]
  posts                 Post[]
  replies               Reply[]
  submissions           Submission[]
  joinedClassrooms      Classroom[]        @relation("joinedClassrooms")
  sentNotifications     Notification[]     @relation("NotificationSender")
  receivedNotifications Notification[]     @relation("NotificationReceiver")
}

model Exam {
  examID      String       @id
  creatorID   String
  classroomID String?
  title       String
  startTime   DateTime     @default(now())
  duration    Int
  description String?
  updatedAt   DateTime     @default(now())
  submissions Int          @default(0)
  totalMarks  Int          @default(0)
  isPublished Boolean      @default(false)
  canSubmit   Boolean      @default(true)
  classroom   Classroom?   @relation(fields: [classroomID], references: [classroomID], onDelete: Cascade)
  creator     User         @relation(fields: [creatorID], references: [userID], onDelete: Cascade)
  questions   Question[]
  Submission  Submission[]
}

model Question {
  questionID BigInt   @default(autoincrement())
  examID     String
  type       String
  points     Int
  exam       Exam     @relation(fields: [examID], references: [examID], onDelete: Cascade)
  Report     Report[]

  @@id([examID, questionID])
}

model Classroom {
  classroomID String             @id
  creatorID   String
  name        String
  description String
  creator     User               @relation("createdClassrooms", fields: [creatorID], references: [userID])
  discussions DiscussionThread[]
  exams       Exam[]
  users       User[]             @relation("joinedClassrooms")
}

model DiscussionThread {
  discussionThreadID BigInt    @id @default(autoincrement())
  classroomID        String
  creatorID          String
  title              String
  content            String
  timeCreated        DateTime  @default(now())
  classroom          Classroom @relation(fields: [classroomID], references: [classroomID])
  creator            User      @relation(fields: [creatorID], references: [userID])
  Post               Post[]
}

model Post {
  postID     BigInt           @id @default(autoincrement())
  creatorID  String
  threadID   BigInt
  content    String
  timePosted DateTime         @default(now())
  creator    User             @relation(fields: [creatorID], references: [userID])
  discussion DiscussionThread @relation(fields: [threadID], references: [discussionThreadID])
  Reply      Reply[]
}

model Reply {
  replyID     BigInt   @id @default(autoincrement())
  creatorID   String
  postID      BigInt
  content     String
  creator     User     @relation(fields: [creatorID], references: [userID])
  timeReplied DateTime @default(now())
  post        Post     @relation(fields: [postID], references: [postID])
}

model Submission {
  studentID      String
  examID         String
  integrityScore Int?      @default(100)
  achievedMarks  Int?      @default(0)
  totalAnswered  Int?      @default(0)
  totalCorrect   Int?      @default(0)
  graded         Boolean?  @default(false)
  submissionTime DateTime? @default(now())
  exam           Exam      @relation(fields: [examID], references: [examID], onDelete: Cascade)
  student        User      @relation(fields: [studentID], references: [userID])

  @@id([studentID, examID], name: "student_exam_composite_id")
}

model Report {
  reportID    BigInt   @id @default(autoincrement())
  type        String
  description String
  examID      String
  questionID  BigInt
  question    Question @relation(fields: [examID, questionID], references: [examID, questionID])
}

model Notification {
  notificationID String   @id @default(uuid())
  fromUserEmail  String // User who sends the notification
  toUserEmail    String // User who receives the notification
  content        String // Content of the notification, e.g., the exam code or a message
  timestamp      DateTime @default(now()) // When the notification was sent
  isRead         Boolean  @default(false) // Whether the notification has been read by the recipient

  fromUser User @relation("NotificationSender", fields: [fromUserEmail], references: [email])
  toUser   User @relation("NotificationReceiver", fields: [toUserEmail], references: [email])
}