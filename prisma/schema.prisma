generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  userID            String             @id @default(uuid())
  username          String             @db.String(255)
  email             String             @unique @db.String(255)
  image             String?            @db.String(255)
  role              String             @default("examiner")
  createdClassrooms Classroom[]        @relation("createdClassrooms")
  discussions       DiscussionThread[]
  Exam              Exam[]
  posts             Post[]
  replies           Reply[]
  submissions       Submission[]
  joinedClassrooms  Classroom[]        @relation("joinedClassrooms")
}

model Exam {
  examID      String       @id
  creatorID   String
  classroomID BigInt?
  title       String
  startTime   DateTime     @default(now())
  duration    Int
  description String?
  updatedAt   DateTime     @default(now())
  submissions Int          @default(0)
  totalMarks  Int          @default(0)
  isPublished Boolean      @default(false)
  classroom   Classroom?   @relation(fields: [classroomID], references: [classroomID])
  creator     User         @relation(fields: [creatorID], references: [userID])
  questions   Question[]
  Submission  Submission[]
  canSubmit   Boolean      @default(true)
}

model Question {
  questionID BigInt   @default(autoincrement())
  examID     String
  type       String
  points     Int
  exam       Exam     @relation(fields: [examID], references: [examID])
  Report     Report[]

  @@id([examID, questionID])
}

model Classroom {
  classroomID BigInt             @id @default(autoincrement())
  creatorID   String
  name        String
  description String
  creator     User               @relation("createdClassrooms", fields: [creatorID], references: [userID])
  discussions DiscussionThread[]
  exams       Exam[]
  users       User[]             @relation("joinedClassrooms")
}

model DiscussionThread {
  discussionThreadID BigInt    @id @default(autoincrement())
  classroomID        BigInt
  creatorID          String
  title              String
  content            String
  timePosted         DateTime  @default(now())
  classroom          Classroom @relation(fields: [classroomID], references: [classroomID])
  creator            User      @relation(fields: [creatorID], references: [userID])
  Post               Post[]
}

model Post {
  postID     BigInt           @id @default(autoincrement())
  creatorID  String
  threadID   BigInt
  content    String
  creator    User             @relation(fields: [creatorID], references: [userID])
  discussion DiscussionThread @relation(fields: [threadID], references: [discussionThreadID])
  Reply      Reply[]
}

model Reply {
  replyID   BigInt @id @default(autoincrement())
  creatorID String
  postID    BigInt
  content   String
  creator   User   @relation(fields: [creatorID], references: [userID])
  post      Post   @relation(fields: [postID], references: [postID])
}

model Submission {
  studentID      String
  student        User      @relation(fields: [studentID], references: [userID])
  examID         String
  exam           Exam      @relation(fields: [examID], references: [examID])
  integrityScore Int?      @default(100)
  achievedMarks  Int?      @default(0)
  submissionTime DateTime? @default(now())
  @@id([studentID, examID], name: "student_exam_composite_id")
}

model Report {
  reportID    BigInt   @id @default(autoincrement())
  type        String
  description String
  examID      String
  questionID  BigInt
  question    Question @relation(fields: [examID, questionID], references: [examID, questionID])
}
