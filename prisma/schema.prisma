generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  userID            String             @id @default(uuid())
  username          String             @db.String(255)
  email             String             @unique @db.String(255)
  image             String?            @db.String(255)
  role              String             @default("examiner")
  createdClassrooms Classroom[]        @relation("createdClassrooms")
  discussions       DiscussionThread[]
  Exam              Exam[]
  posts             Post[]
  replies           Reply[]
  submissions       Submission[]
  joinedClassrooms  Classroom[]        @relation("joinedClassrooms")
}

model Exam {
  examID      String       @id
  creatorID   String
  classroomID Int?
  title       String
  startTime   DateTime     @default(now())
  duration    Int
  description String?
  updatedAt   DateTime?
  submissions Int          @default(0)
  totalMarks  Int          @default(0)
  isPublished Boolean      @default(false)
  classroom   Classroom?   @relation(fields: [classroomID], references: [classroomID])
  creator     User         @relation(fields: [creatorID], references: [userID])
  questions   Question[]
  Submission  Submission[]
}

model Question {
  questionID Int      @default(sequence())
  examID     String
  type       String
  points     Int
  exam       Exam     @relation(fields: [examID], references: [examID])
  Report     Report[]

  @@id([examID, questionID])
}

model Classroom {
  classroomID Int                @id @default(sequence())
  creatorID   String
  name        String
  description String
  creator     User               @relation("createdClassrooms", fields: [creatorID], references: [userID])
  discussions DiscussionThread[]
  exams       Exam[]
  users       User[]             @relation("joinedClassrooms")
}

model DiscussionThread {
  discussionThreadID Int       @id @default(sequence())
  classroomID        Int
  creatorID          String
  title              String
  content            String
  timePosted         DateTime  @default(now())
  classroom          Classroom @relation(fields: [classroomID], references: [classroomID])
  creator            User      @relation(fields: [creatorID], references: [userID])
  Post               Post[]
}

model Post {
  postID     Int              @id @default(sequence())
  creatorID  String
  threadID   Int
  content    String
  creator    User             @relation(fields: [creatorID], references: [userID])
  discussion DiscussionThread @relation(fields: [threadID], references: [discussionThreadID])
  Reply      Reply[]
}

model Reply {
  replyID   Int    @id @default(sequence())
  creatorID String
  postID    Int
  content   String
  creator   User   @relation(fields: [creatorID], references: [userID])
  post      Post   @relation(fields: [postID], references: [postID])
}

model Submission {
  submissionID   Int     @id @default(sequence())
  studentID      String
  examID         String
  integrityScore Int     @default(100)
  achievedMarks  Int
  canSubmit      Boolean
  exam           Exam    @relation(fields: [examID], references: [examID])
  student        User    @relation(fields: [studentID], references: [userID])
}

model Report {
  reportID    Int      @id @default(sequence())
  type        String
  description String
  examID      String
  questionID  Int
  question    Question @relation(fields: [examID, questionID], references: [examID, questionID])
}
